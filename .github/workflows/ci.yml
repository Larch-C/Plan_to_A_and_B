name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: ${{ github.head_ref || github.ref_name }}
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv pip install --system -e ".[dev]"
        uv pip install --system pre-commit
    
    - name: Set up pre-commit cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
    
    - name: Run pre-commit
      run: |
        # 创建__pycache__目录
        mkdir -p plan_manager/__pycache__
        
        # 运行pre-commit（不在workflow目录上）
        pre-commit run --files $(git ls-files | grep -v "\.github/workflows/")
        
        # 在PR中我们只检查，但在主分支上我们允许自动修复
        if [[ "${{ github.event_name }}" != "pull_request" && -n $(git status -s | grep -v "\.github/workflows/") ]]; then
          # 配置git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 只添加非工作流文件
          git ls-files --modified --others --exclude-standard | grep -v "\.github/workflows/" | xargs git add
          
          # 如果有文件被添加到暂存区
          if git diff --cached --quiet; then
            echo "没有非工作流文件需要提交"
          else
            # 拉取最新更改
            git pull --rebase origin ${GITHUB_REF#refs/heads/}
            
            # 提交更改
            git commit -m "style: 使用pre-commit自动修复代码风格问题"
            git push origin ${GITHUB_REF#refs/heads/}
          fi
        fi
    
    - name: Test with pytest
      run: |
        mkdir -p tests
        echo "def test_import(): import plan_manager" > tests/test_import.py
        pytest --cov=plan_manager
    
  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/* 