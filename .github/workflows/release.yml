name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: v1.0.1)'
        required: true
        default: ''

# 简化权限设置
permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Set version if running manually
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
    
    - name: Create and Push Tag (if manually triggered)
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a $VERSION -m "Release $VERSION"
        git push origin $VERSION
      env:
        VERSION: ${{ github.event.inputs.version }}
    
    - name: Set version from tag
      if: github.event_name == 'push'
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .
    
    - name: Update version in pyproject.toml
      run: |
        VERSION_NUM=${VERSION#v}
        sed -i "s/version = \"[^\"]*\"/version = \"${VERSION_NUM}\"/" pyproject.toml
    
    - name: Make changelog script executable
      run: |
        chmod +x tools/generate_changelog.py
    
    - name: Generate changelog
      run: |
        python tools/generate_changelog.py
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check PyPI credentials
      id: check_creds
      run: |
        if [[ -n "${{ secrets.PYPI_USERNAME }}" && -n "${{ secrets.PYPI_API_TOKEN }}" ]]; then
          echo "has_pypi_creds=true" >> $GITHUB_OUTPUT
        else
          echo "has_pypi_creds=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Publish to PyPI
      # 不使用gh-action-pypi-publish，改用twine直接上传
      if: steps.check_creds.outputs.has_pypi_creds == 'true'
      run: |
        python -m twine upload dist/*
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    
    - name: Skip PyPI Publish (No Credentials)
      if: steps.check_creds.outputs.has_pypi_creds != 'true'
      run: |
        echo "跳过PyPI发布 - 未提供凭据"
        echo "如需发布到PyPI，请在仓库Secrets中设置PYPI_USERNAME和PYPI_API_TOKEN"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ env.VERSION }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        files: |
          dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 