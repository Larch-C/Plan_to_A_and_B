#!/usr/bin/env python3
"""
Git pre-commit钩子，在提交前运行代码检查

安装方法:
1. 确保脚本可执行: chmod +x tools/pre-commit
2. 建立符号链接到 .git/hooks 目录: ln -sf ../../tools/pre-commit .git/hooks/pre-commit

功能:
- 运行黑色格式化工具(black)
- 运行代码检查工具(flake8)
- 运行类型检查工具(mypy)
"""

import os
import sys
import subprocess
from pathlib import Path


# 获取Git暂存区中的Python文件
def get_staged_python_files():
    result = subprocess.run(
        ["git", "diff", "--cached", "--name-only", "--diff-filter=ACM"],
        capture_output=True,
        text=True,
        check=True
    )
    files = result.stdout.splitlines()
    return [f for f in files if f.endswith(".py")]


# 运行命令的通用函数
def run_command(cmd, files, error_message):
    if not files:
        return True
    
    try:
        subprocess.run(cmd + files, check=True, capture_output=True, text=True)
        return True
    except subprocess.CalledProcessError as e:
        print(error_message)
        print(e.stdout)
        print(e.stderr)
        return False


# 检查是否安装了工具
def is_tool_installed(tool):
    try:
        subprocess.run([tool, "--version"], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False


def check_if_uv_installed():
    try:
        subprocess.run(["uv", "--version"], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False


def install_tools_if_needed():
    tools = {
        "black": "black>=23.0.0",
        "flake8": "flake8>=6.0.0",
        "mypy": "mypy>=1.0.0"
    }
    
    missing_tools = [tool for tool, _ in tools.items() if not is_tool_installed(tool)]
    
    if missing_tools:
        print(f"缺少以下工具: {', '.join(missing_tools)}")
        
        if check_if_uv_installed():
            install_cmd = ["uv", "pip", "install"]
        else:
            install_cmd = ["pip", "install"]
            
        install_args = [tools[tool] for tool in missing_tools]
        
        try:
            print(f"正在安装: {' '.join(install_args)}")
            subprocess.run(install_cmd + install_args, check=True)
            return True
        except subprocess.CalledProcessError:
            print("工具安装失败，请手动安装后重试")
            return False
    
    return True


def main():
    # 如果不在Git仓库根目录，切换到根目录
    git_root = subprocess.run(
        ["git", "rev-parse", "--show-toplevel"],
        capture_output=True,
        text=True,
        check=True
    ).stdout.strip()
    
    os.chdir(git_root)
    
    # 获取暂存区的Python文件
    py_files = get_staged_python_files()
    if not py_files:
        print("没有暂存的Python文件，跳过检查")
        return 0
    
    # 检查并安装工具
    if not install_tools_if_needed():
        return 1
    
    # 运行Black格式化
    print("运行Black代码格式化...")
    if not run_command(["black", "--quiet"], py_files, "Black格式化失败:"):
        return 1
    
    # 将格式化后的文件重新添加到暂存区
    subprocess.run(["git", "add"] + py_files, check=True)
    
    # 运行Flake8
    print("运行Flake8代码检查...")
    if not run_command(["flake8"], py_files, "Flake8检查失败:"):
        print("提示: 你可以使用'git commit --no-verify'绕过这些检查")
        return 1
    
    # 运行Mypy类型检查
    print("运行Mypy类型检查...")
    if not run_command(["mypy"], py_files, "Mypy类型检查失败:"):
        print("提示: 你可以使用'git commit --no-verify'绕过这些检查")
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main()) 