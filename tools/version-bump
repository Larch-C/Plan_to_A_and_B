#!/usr/bin/env python3
"""
版本升级工具 - 自动更新版本号并生成更新日志

使用方法:
    python tools/version-bump.py [major|minor|patch]

功能:
1. 根据指定类型升级版本号 (major.minor.patch)
2. 更新pyproject.toml中的版本号
3. 运行生成CHANGELOG.md的脚本
4. 创建带版本的Git提交和标签
"""

import sys
import os
import re
import subprocess
import argparse
from pathlib import Path

# 版本升级类型
VERSION_TYPES = ["major", "minor", "patch"]

def parse_args():
    parser = argparse.ArgumentParser(description="版本升级工具")
    parser.add_argument("bump_type", choices=VERSION_TYPES, 
                        help="要升级的版本部分: major, minor, 或 patch")
    parser.add_argument("--skip-changelog", action="store_true",
                       help="跳过更新CHANGELOG.md")
    parser.add_argument("--skip-commit", action="store_true",
                       help="跳过创建Git提交")
    parser.add_argument("--skip-tag", action="store_true",
                       help="跳过创建Git标签")
    return parser.parse_args()

def get_current_version():
    """从pyproject.toml获取当前版本"""
    with open("pyproject.toml", "r", encoding="utf-8") as f:
        content = f.read()
    
    match = re.search(r'version\s*=\s*["\']([^"\']+)["\']', content)
    if not match:
        raise ValueError("无法在pyproject.toml中找到版本号")
    
    return match.group(1)

def bump_version(current_version, bump_type):
    """升级版本号"""
    major, minor, patch = map(int, current_version.split("."))
    
    if bump_type == "major":
        major += 1
        minor = 0
        patch = 0
    elif bump_type == "minor":
        minor += 1
        patch = 0
    elif bump_type == "patch":
        patch += 1
    
    return f"{major}.{minor}.{patch}"

def update_version_in_file(new_version):
    """更新pyproject.toml中的版本号"""
    with open("pyproject.toml", "r", encoding="utf-8") as f:
        content = f.read()
    
    updated_content = re.sub(
        r'(version\s*=\s*)["\']([^"\']+)["\']',
        f'\\1"{new_version}"',
        content
    )
    
    with open("pyproject.toml", "w", encoding="utf-8") as f:
        f.write(updated_content)
    
    print(f"pyproject.toml中的版本已更新到: {new_version}")

def generate_changelog():
    """运行CHANGELOG生成脚本"""
    script_path = Path("tools") / "generate_changelog.py"
    
    if not script_path.exists():
        print("警告: 找不到更新日志生成脚本，跳过更新CHANGELOG.md")
        return False
    
    try:
        subprocess.run([sys.executable, str(script_path)], check=True)
        print("CHANGELOG.md已更新")
        return True
    except subprocess.CalledProcessError as e:
        print(f"错误: 更新CHANGELOG.md失败: {e}")
        return False

def create_git_commit_and_tag(version):
    """创建Git提交和标签"""
    try:
        # 添加修改后的文件
        subprocess.run(["git", "add", "pyproject.toml", "CHANGELOG.md"], check=True)
        
        # 创建提交
        commit_message = f"chore: 版本升级到 v{version}"
        subprocess.run(["git", "commit", "-m", commit_message], check=True)
        print(f"已创建Git提交: {commit_message}")
        
        # 创建标签
        tag_name = f"v{version}"
        subprocess.run(["git", "tag", "-a", tag_name, "-m", f"版本 {tag_name}"], check=True)
        print(f"已创建Git标签: {tag_name}")
        
        return True
    except subprocess.CalledProcessError as e:
        print(f"错误: Git操作失败: {e}")
        return False

def main():
    args = parse_args()
    
    try:
        # 获取当前版本
        current_version = get_current_version()
        print(f"当前版本: {current_version}")
        
        # 升级版本号
        new_version = bump_version(current_version, args.bump_type)
        print(f"新版本: {new_version}")
        
        # 更新pyproject.toml
        update_version_in_file(new_version)
        
        # 更新CHANGELOG.md
        if not args.skip_changelog:
            generate_changelog()
        
        # 创建Git提交和标签
        if not args.skip_commit:
            if create_git_commit_and_tag(new_version) and not args.skip_tag:
                print(f"版本 {new_version} 升级完成!")
        
        return 0
    except Exception as e:
        print(f"错误: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 